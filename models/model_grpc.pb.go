// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: github.com/amina-b/gRPC-basic/models/model.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	ValidateUsers(ctx context.Context, opts ...grpc.CallOption) (UsersService_ValidateUsersClient, error)
	GetCourses(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UsersService_GetCoursesClient, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) ValidateUsers(ctx context.Context, opts ...grpc.CallOption) (UsersService_ValidateUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[0], "/UsersService/ValidateUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceValidateUsersClient{stream}
	return x, nil
}

type UsersService_ValidateUsersClient interface {
	Send(*UserRequest) error
	CloseAndRecv() (*UserResponse, error)
	grpc.ClientStream
}

type usersServiceValidateUsersClient struct {
	grpc.ClientStream
}

func (x *usersServiceValidateUsersClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersServiceValidateUsersClient) CloseAndRecv() (*UserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersServiceClient) GetCourses(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (UsersService_GetCoursesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UsersService_ServiceDesc.Streams[1], "/UsersService/GetCourses", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersServiceGetCoursesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsersService_GetCoursesClient interface {
	Recv() (*UserCourse, error)
	grpc.ClientStream
}

type usersServiceGetCoursesClient struct {
	grpc.ClientStream
}

func (x *usersServiceGetCoursesClient) Recv() (*UserCourse, error) {
	m := new(UserCourse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations should embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	ValidateUsers(UsersService_ValidateUsersServer) error
	GetCourses(*UserRequest, UsersService_GetCoursesServer) error
}

// UnimplementedUsersServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) ValidateUsers(UsersService_ValidateUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ValidateUsers not implemented")
}
func (UnimplementedUsersServiceServer) GetCourses(*UserRequest, UsersService_GetCoursesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCourses not implemented")
}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_ValidateUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServiceServer).ValidateUsers(&usersServiceValidateUsersServer{stream})
}

type UsersService_ValidateUsersServer interface {
	SendAndClose(*UserResponse) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type usersServiceValidateUsersServer struct {
	grpc.ServerStream
}

func (x *usersServiceValidateUsersServer) SendAndClose(m *UserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersServiceValidateUsersServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UsersService_GetCourses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServiceServer).GetCourses(m, &usersServiceGetCoursesServer{stream})
}

type UsersService_GetCoursesServer interface {
	Send(*UserCourse) error
	grpc.ServerStream
}

type usersServiceGetCoursesServer struct {
	grpc.ServerStream
}

func (x *usersServiceGetCoursesServer) Send(m *UserCourse) error {
	return x.ServerStream.SendMsg(m)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ValidateUsers",
			Handler:       _UsersService_ValidateUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCourses",
			Handler:       _UsersService_GetCourses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/amina-b/gRPC-basic/models/model.proto",
}
